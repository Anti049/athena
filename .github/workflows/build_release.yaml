name: Build & Release

on:
    push:
        branches:
            - main
        tags:
            - 'v*.*.*'
    pull_request:
        branches:
            - main
        tags:
            - 'v*.*.*'
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    build:
        name: Build & Release
        runs-on: macos-latest
        steps:
            # Step 0.1: Get Repository Name
            - name: Get Repository Name
              id: get_repo_name
              run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

            # Step 0.2: Get Veersion from Tag
            - name: Get Tag
              if: startsWith(github.ref, 'refs/tags/') && github.repository == 'Anti049/athena'
              run: |
                  set -x
                  echo "VERSION_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

            # Step 1: Checkout Repository
            - name: Checkout code
              uses: actions/checkout@v4

            # Step 2: Setup Flutter
            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  channel: stable

            # Step 2.5: Setup Java
            - name: Setup Java
              uses: actions/setup-java@v4.5.0
              with:
                  distribution: 'adopt'
                  java-version: '17'

            # Step 3: Verify Flutter
            - name: Verify Flutter
              run: |
                  flutter --version
                  flutter doctor --verbose

            # Step 3.5: Disable Analytics
            - name: Disable Analytics
              run: flutter config --no-analytics

            # Step 4: Install Dependencies
            - name: Install Dependencies
              run: flutter pub get

            # Step 4.5: Generate Intermediates
            - name: Generate Intermediates
              run: flutter pub run build_runner build --delete-conflicting-outputs

            # Step 5.1: Decode Keystore

            # Step 5.2: Build Android (Single APK)
            - name: Build Android (Single APK)
              run: flutter build apk --flavor production -t lib/main_production.dart --release

            # Step 5.3: Build Android (App Bundle)
            - name: Build Android (App Bundle)
              run: flutter build appbundle --flavor production -t lib/main_production.dart --release

            # Step 5.4: Rename APK and App Bundle
            - name: Rename APK and App Bundle
              run: |
                  mv build/app/outputs/flutter-apk/*.apk build/app/outputs/flutter-apk/${{env.REPO_NAME}}.apk
                  mv build/app/outputs/bundle/**/*.aab build/app/outputs/bundle/${{env.REPO_NAME}}.aab

            # Step 5.5: Upload APK and App Bundle
            - name: Upload APK and App Bundle
              uses: actions/upload-artifact@v4.4.3
              with:
                  name: ${{env.REPO_NAME}}
                  path: |
                      build/app/outputs/flutter-apk/${{env.REPO_NAME}}.apk
                      build/app/outputs/bundle/${{env.REPO_NAME}}.aab

            # Step 6.1: Build iOS
            # - name: Build iOS
            #   run: flutter build ipa --flavor production -t lib/main_production.dart --release --no-codesign

            # # Step 6.2: Compress Archives and IPAs
            # - name: Compress Archives and IPAs
            #   run: |
            #       cd build
            #       tar -czf ${{env.REPO_NAME}}-ios.tar.gz ios

            # Step 7.1: Build Web
            # - name: Build Web
            #   run: flutter build web -t lib/main_production.dart --release

            # # Step 7.2: Compress Web
            # - name: Compress Web
            #   run: |
            #       cd build/web
            #       tar -czf ${{env.REPO_NAME}}-web.tar.gz .

            # Step 8: Get Tag
            - name: Get Tag
              if: startsWith(github.ref, 'refs/tags/') && github.repository == 'Anti049/athena'
              run: |
                  set -x
                  echo "VERSION_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

            # Step 9: Cleanup Artifacts
            - name: Cleanup Artifacts
              if: startsWith(github.ref, 'refs/tags/') && github.repository == 'Anti049/athena'
              run: |
                  set -e

                  mv build/app/outputs/flutter-apk/${{env.REPO_NAME}}.apk athena-${{env.VERSION_TAG}}.apk
                  sha=`sha256sum athena-${{env.VERSION_TAG}}.apk | awk '{print $1}'`
                  echo "APK_UNIVERSAL_SHA=$sha" >> $GITHUB_ENV

                  mv build/app/outputs/bundle/${{env.REPO_NAME}}.aab athena-${{env.VERSION_TAG}}.aab
                  sha=`sha256sum athena-${{env.VERSION_TAG}}.aab | awk '{print $1}'`
                  echo "AAB_UNIVERSAL_SHA=$sha" >> $GITHUB_ENV

            # Step 10: Create Release
            - name: Create Release
              if: startsWith(github.ref, 'refs/tags/') && github.repository == 'Anti049/athena'
              uses: softprops/action-gh-release@v2.0.9
              with:
                  name: Athena ${{env.VERSION_TAG}}
                  tag_name: ${{env.VERSION_TAG}}
                  token: ${{ secrets.TOKEN }}
                  files: |
                      athena-${{env.VERSION_TAG}}.apk
                      athena-${{env.VERSION_TAG}}.aab
                  body: |
                      ---

                      ### Checksums

                      | Variant | SHA-256 |
                      | ------- | ------- |
                      | Universal (APK) | ${{env.APK_UNIVERSAL_SHA}} |
                      | Universal (AAB) | ${{env.AAB_UNIVERSAL_SHA}} |

                      ## If you are unsure which version to use the go with athena-${{env.VERSION_TAG}}.apk
                  draft: true
                  prerelease: false
