name: Build & Release

# Run when a new version tag is pushed (v0.1.0 -> v0.1.1)
on:
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    build-android:
        name: Build Android
        runs-on: ubuntu-latest
        steps:
            # Step 0.1: Get Repository Name
            - name: Get Repository Name
              id: get_repo_name
              run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

            # Step 1: Checkout Repository
            - name: Checkout code
              uses: actions/checkout@v4

            # Step 1.5: Get Version from pubspec.yaml
            - name: Get flutter version
              id: get_flutter_version
              uses: its404/get-flutter-version@v1.0.0

            # Step 1.6: Set Flutter Version
            - name: Output flutter version
              run: echo "VERSION=${{ steps.get_flutter_version.outputs.version_number }}" >> $GITHUB_ENV

            # Step 2: Setup Flutter
            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  channel: stable

            # Step 2.5: Setup Java
            - name: Setup Java
              uses: actions/setup-java@v3.12.0
              with:
                  distribution: 'oracle'
                  java-version: '17'

            # Step 3: Verify Flutter
            - name: Verify Flutter
              run: |
                  flutter --version
                  flutter doctor --verbose

            # Step 3.5: Disable Analytics
            - name: Disable Analytics
              run: flutter config --no-analytics

            # Step 4: Install Dependencies
            - name: Install Dependencies
              run: flutter pub get

            # Step 4.5: Generate Intermediates
            - name: Generate Intermediates
              run: dart run build_runner build --delete-conflicting-outputs

            # Step 5: Run Tests
            - name: Run Tests
              run: flutter analyze

            # Step 6.1: Build App Bundle
            - name: Build App Bundle
              run: flutter build appbundle --flavor production -t lib/main_production.dart --release

            # Step 6.2: Build APK
            - name: Build APK
              run: flutter build apk --flavor production -t lib/main_production.dart --release

            # Step 7: Rename APK and AAB Files
            - name: Rename APK and AAB Files
              run: |
                  mv build/app/outputs/bundle/**/*.aab build/app/outputs/bundle/${{env.REPO_NAME}}-v${{env.VERSION}}.aab
                  mv build/app/outputs/flutter-apk/*.apk build/app/outputs/flutter-apk/${{env.REPO_NAME}}-v${{env.VERSION}}.apk

            # Step 8.1: Upload AAB File
            - name: Upload AAB File
              uses: actions/upload-artifact@v4
              with:
                  name: ${{env.REPO_NAME}}-v${{env.VERSION}}-aab
                  path: build/app/outputs/bundle/${{env.REPO_NAME}}-v${{env.VERSION}}.aab

            # Step 8.2: Upload APK File
            - name: Upload APK File
              uses: actions/upload-artifact@v4
              with:
                  name: ${{env.REPO_NAME}}-v${{env.VERSION}}-apk
                  path: build/app/outputs/flutter-apk/${{env.REPO_NAME}}-v${{env.VERSION}}.apk

    build-ios:
        name: Build iOS
        runs-on: macos-latest
        steps:
            # Step 0.1: Get Repository Name
            - name: Get Repository Name
              id: get_repo_name
              run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

            # Step 1: Checkout Repository
            - name: Checkout code
              uses: actions/checkout@v4

            # Step 1.5: Get Version from pubspec.yaml
            - name: Get flutter version
              id: get_flutter_version
              uses: its404/get-flutter-version@v1.0.0

            # Step 1.6: Set Flutter Version
            - name: Output flutter version
              run: echo "VERSION=${{ steps.get_flutter_version.outputs.version_number }}" >> $GITHUB_ENV

            # Step 2: Setup Flutter
            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  channel: stable

            # Step 3: Verify Flutter
            - name: Verify Flutter
              run: |
                  flutter --version
                  flutter doctor --verbose

            # Step 3.5: Disable Analytics
            - name: Disable Analytics
              run: flutter config --no-analytics

            # Step 4: Install Dependencies
            - name: Install Dependencies
              run: flutter pub get

            # Step 4.5: Generate Intermediates
            - name: Generate Intermediates
              run: dart run build_runner build --delete-conflicting-outputs

            # Step 5: Run Tests
            - name: Run Tests
              run: flutter analyze

            # Step 6: Build iOS
            - name: Build iOS
              run: flutter build ipa --flavor production -t lib/main_production.dart --release --no-codesign

            # Step 7: Compress Archives and IPAs
            - name: Compress Archives and IPAs
              run: |
                  cd build
                  tar -czf ${{env.REPO_NAME}}-v${{env.VERSION}}-ios.tar.gz ios

            # Step 8: Upload Archives and IPAs
            - name: Upload Archives and IPAs
              uses: actions/upload-artifact@v4
              with:
                  name: ${{env.REPO_NAME}}-v${{env.VERSION}}-ios
                  path: build/${{env.REPO_NAME}}-v${{env.VERSION}}-ios.tar.gz

    release:
        name: Release
        runs-on: ubuntu-latest
        needs: [build-android, build-ios]
        steps:
            # Step 0.1: Get Repository Name
            - name: Get Repository Name
              id: get_repo_name
              run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

            # Step 1: Checkout Repository
            - name: Checkout code
              uses: actions/checkout@v4

            # Step 0.2: Get Version from pubspec.yaml
            - name: Get Version from pubspec.yaml
              id: get_version
              run: |
                  version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
                  echo "VERSION=${{env.VERSION}}" >> $GITHUB_ENV

            # Step 1.1: Download AAB Artifact (Android)
            - name: Download AAB Artifact
              uses: actions/download-artifact@v4
              with:
                  name: ${{ needs.build-android.outputs.REPO_NAME }}-v${{ needs.build-android.outputs.VERSION }}-aab

            # Step 1.2: Download APK Artifact (Android)
            - name: Download APK Artifact
              uses: actions/download-artifact@v4
              with:
                  name: ${{ needs.build-android.outputs.REPO_NAME }}-v${{ needs.build-android.outputs.VERSION }}-apk

            # Step 1.3: Download Artifacts (iOS)
            - name: Download Artifacts (iOS)
              uses: actions/download-artifact@v4
              with:
                  name: ${{ needs.build-ios.outputs.REPO_NAME }}-v${{ needs.build-ios.outputs.VERSION }}-ios

            # Step 2: Check if Tag Exists
            - name: Check if Tag Exists
              id: check_tag
              run: |
                  if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
                    echo "TAG_EXISTS=true" >> $GITHUB_ENV
                  else
                    echo "TAG_EXISTS=false" >> $GITHUB_ENV
                  fi

            # Step 3: Create Tag (if it doesn't exist)
            - name: Create Tag
              if: env.TAG_EXISTS == 'false'
              run: git tag "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"

            # Step 4: Create Release
            - name: Create Release
              if: env.TAG_EXISTS == 'false'
              id: create_release
              uses: ncipollo/release-action@v1
              with:
                  artifacts: |
                      ${{ needs.build-android.outputs.REPO_NAME }}-v${{ needs.build-android.outputs.VERSION }}-aab
                      ${{ needs.build-android.outputs.REPO_NAME }}-v${{ needs.build-android.outputs.VERSION }}-apk
                      ${{ needs.build-ios.outputs.REPO_NAME }}-v${{ needs.build-ios.outputs.VERSION }}-ios
                  tag: v${{ env.VERSION }}
                  token: ${{ secrets.TOKEN }}

            # Step 4.5: Check if Release was Created
            - name: Check Release Creation
              if: env.TAG_EXISTS == 'false'
              run: |
                  if [ -z "${{ steps.create_release.outputs.upload_url }}" ]; then
                    echo "Release creation failed."
                    exit 1
                  fi

            # Step 5: Upload Release Notes
            - name: Upload Release Notes
              if: env.TAG_EXISTS == 'false'
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: CHANGELOG.md
                  asset_name: CHANGELOG.md
                  asset_content_type: text/markdown
